cmake_minimum_required( VERSION 3.1 )

project( q )

# recommandation, do not build in source.
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)

# required for library API/ABI tagging 
set(q_MAJOR_VERSION 0)
set(q_MINOR_VERSION 0)
set(q_PATCH_VERSION 1)
set(q_VERSION ${q_MAJOR_VERSION}.${q_MINOR_VERSION}.${q_PATCH_VERSION})

# if no build config given, we decide
if(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING
      "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
      FORCE )
endif(NOT CMAKE_BUILD_TYPE)


include( "cmake/projects.cmake" )

# TODO, this is messing up my terminal, showing control characters
# use cmake build in since these are guraranteed to not mess things up 
include( "cmake/colors.cmake" )

# TODO, debug postfix MS only,  not useful - and used - att all on linux 
# move into compiler setup ?
set( CMAKE_DEBUG_POSTFIX "d" )

# set up the comiler
include( "cmake/compilersetup.cmake" )



# TODO this should not come via the environemnt, make an option
if ( "$ENV{MODE}" STREQUAL "debug" )
	add_definitions( "-ftemplate-backtrace-limit=0" )
endif ( )

include_directories( "libs/q/include" )
add_subdirectory( "libs/q" )

# TODO this external dependency is a pain, either put it in the reamdme, or
# if mocking is needed, switch to Trompeloeil (header only)
include_directories( "3rdparty/gmock-1.7.0/gtest/include/" )
include_directories( "3rdparty/gmock-1.7.0/include/" )
include_directories( "libs/q-test/include" )
add_subdirectory( "libs/q-test" )

#add_subdirectory( "libs/p" )

# TODO does not exits, can be removed ?
include_directories( "3rdparty/dist/include/" )

add_subdirectory( "progs/playground" )
add_subdirectory( "progs/benchmark" )

# TODO if mocking is needed, switch to Trompeloeil
add_subdirectory( "3rdparty/gmock-1.7.0" )

add_subdirectory( "tests/qtest" )
add_subdirectory( "tests/q" )


# TODO remove, not usefull , either   
# A) I am in a directory, run cmake manual, than I know what to do
# B) generated by scritp, than the script has to tell this  
q_message( "q project successfully created!" )
if ( APPLE )
	q_message( "You can now open " PATH "${CMAKE_BINARY_DIR}/q.xcodeproj" )
elseif ( UNIX )
	q_message( "You can now enter " PATH "${Cyan}${CMAKE_BINARY_DIR}/"
		" and make the libraries" )
elseif ( MSVC )
	q_message( "You can now open " PATH "${CMAKE_BINARY_DIR}/q.sln" )
endif ( )
